1.要用命令行模式变为python交互模式，需要在控制面板的编辑环境变量中设置，
在path中新建一个C:\Program Files (x86)\Microsoft Visual Studio\Shared\Python36_64使用

2.print（）函数可以接受多个字符串，在每个字符串，即几段双引号之间的句子中间打逗号，
可以在输出时成为空格。

3.if ，else语句后记得用冒号，之前记得给变量赋值，冒号语句后坚持4个空格的缩进。

4.但是对于很大或很小的浮点数，就必须用科学计数法表示，把10用e替代，1.23x109就是1.23e9，或者12.3e8，0.000012可以写成1.2e-5

5.''或""本身只是一种表示方式，不是字符串的一部分，因此，字符串'abc'只有a，b，c这3个字符。如果'本身也是一个字符，那就可以用""括起来
如果字符串内部既包含'又包含"怎么办？可以用转义字符\来标识，比如：
'I\'m \"OK\"!'
表示的字符串内容是：
I'm "OK"!
转义字符\可以转义很多字符，比如\n表示换行，\t表示制表符，字符\本身也要转义，所以\\表示的字符就是\，（  \用于在存在多个引号时，
插在两边引号之间，来标识需要被打出的引号。）

6.如果字符串内部有很多换行，用\n写在一行里不好阅读，为了简化，Python允许用'''...'''（三引号）的格式表示多行内容，可以自己试试：
>>> print('''line1
... line2
... line3''')
line1
line2
line3  即可分为三行。

7.上面是在交互式命令行内输入，注意在输入多行内容时，提示符由>>>变为...，提示你可以接着上一行输入，注意...是提示符，不是代码的一部分。
>>> print('''line1                                                 						注：...是打完一行按回车自动形成的。
... line2
... line3''')
line1
line2
line3
                                              ！！！ 多行字符串'''...'''还可以在前面加上r使用，默认不转义。

8.交互式模式与.py文件的区别，交互式中打一行后回车会有...提示符，且交互式直接输出结果，而.py文件没有...提示符。
Python交互模式主要是为了调试Python代码用的
在命令行模式下，可以直接运行.py文件。
在写完一行代码，回车后会立即执行并得到结果的就是Python交互模式。
命令行模式不能运行Python代码。
交互式运行代码会直接给出表达式的结果，运行代码文件必须print才能在控制台看到结果。
交互式中可以用下划线 `_` 来查看上一次输出的结果。如果给下划线赋值，这个效果就没了。

9.在Python中，可以直接用True、False表示布尔值（请注意大小写），也可以通过布尔运算计算出来。
and与，or或，not非。（高中已学）

10.空值是Python里一个特殊的值，用None表示。None不能理解为0，因为0是有意义的，而None是一个特殊的空值。

11.变量在程序中就是用一个变量名表示了，变量名必须是大小写英文、数字和_的组合，且不能用数字开头

12./除法计算结果是浮点数，即使是两个整数恰好整除，结果也是浮点数。
还有一种除法是//，称为地板除，两个整数的除法仍然是整数。      %为余数运算。

13.Python的浮点数也没有大小限制，但是超出一定范围就直接表示为inf（无限大）。

14.由于计算机是美国人发明的，因此，最早只有127个字符被编码到计算机里，也就是大小写英文字母、数字和一些符号，这个编码表被称为ASCII编码，
比如大写字母A的编码是65，小写字母z的编码是122。但是要处理中文显然一个字节是不够的，至少需要两个字节，而且还不能和ASCII编码冲突，所以，
中国制定了GB2312编码，用来把中文编进去。
你可以想得到的是，全世界有上百种语言，日本把日文编到Shift_JIS里，韩国把韩文编到Euc-kr里，各国有各国的标准，就会不可避免地出现冲突，结果
就是，在多语言混合的文本中，显示出来会有乱码。
因此，Unicode应运而生。Unicode把所有语言都统一到一套编码里，这样就不会再有乱码问题了。
ASCII编码是1个字节，而Unicode编码通常是2个字节。1个中文字符经过UTF-8编码后通常会占用3个字节，而1个英文字符只占用1个字节。

！！！！字符编码问题未弄懂！！！！（！！！坚持使用utf-8编码！！！）

15.对于单个字符的编码，Python提供了ord()函数获取字符的整数表示，chr()函数把编码转换为对应的字符
>>> ord('A')
65
>>> ord('中')
20013
>>> chr(66)
'B'
>>> chr(25991)
'文'

16.！！！！！！！！！python中有两个很好用的函数 decode() 和 encode()


decode(‘utf-8’) 是从utf-8编码转换成unicode编码，当然括号里也可以写'gbk'


encode('gbk') 是将unicode编码编译成gbk编码，当然括号里也可以写'utf-8'

17.要注意区分'ABC'和b'ABC'，前者是str，后者虽然内容显示得和前者一样，但bytes的每个字符都只占用一个字节。(!!!!!str 是什么鬼？）

18.以Unicode表示的str通过encode()方法可以编码为指定的bytes（带b的前缀）Python对bytes类型的数据用带b前缀的单引号或双引号表示：
x = b'ABC'，纯英文的str可以用ASCII编码为bytes，内容是一样的，
含有中文的str可以用UTF-8编码为bytes。
含有中文的str无法用ASCII编码，因为中文编码的范围超过了ASCII编码的范围，Python会报错。
   ！！！！在bytes中，无法显示为ASCII字符的字节，用\x##显示。

19.如果bytes中只有一小部分无效的字节，可以传入errors='ignore'忽略错误的字节：（！！！！！！）
>>> b'\xe4\xb8\xad\xff'.decode('utf-8', errors='ignore')
'中'

20.要计算str包含多少个字符，可以用len()函数，也可计算bytes的字节数。

21.# -*- coding: utf-8 -*-     按utf-8读取源代码。

22.在Python中，采用的格式化方式和C语言是一致的，用%实现。
>>> 'Hello, %s' % 'world'
'Hello, world'
>>> 'Hi, %s, you have $%d.' % ('Michael', 1000000)
'Hi, Michael, you have $1000000.'（无print输出就带引号！！！）
在字符串内部，有几个%占位符，后面就跟几个变量或者值，顺序要对应好。如果只有一个%，括号可以省略。（括号前的百分号别少！！！）

%s：字符串    %d：整数    %f：浮点数    %x：十六进制整数       ！！！！%s永远起作用，它会把任何数据类型转换为字符串

%.2f说明保留两位小数。

23.其中，格式化整数和浮点数还可以指定是否补0（在数的最左边补0）和整数与小数的位数：
%9.2f 表示输出场宽为9的浮点数,其中小数位为2,整数位为6,小数点占一位,不够9位右对齐。
print('%2d-%02d' % (3, 1))       输出为3-01

24.有些时候，字符串里面的%是一个普通字符怎么办？这个时候就需要转义，用%%来表示一个%。

25.另一种格式化字符串的方法是使用字符串的format()方法，它会用传入的参数依次替换字符串内的占位符{0}、{1}……，不过这种方式写起来比%要麻烦得多：
>>> 'Hello, {0}, 成绩提升了 {1:.1f}%'.format('小明', 17.125)                                                ！！！！！新的占位符！！！！！注意看示例用法。。。
'Hello, 小明, 成绩提升了 17.1%'（保留一位小数）            ！！！存在问题！！！！
   